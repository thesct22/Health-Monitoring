
IOTCHALN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000238  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  0000023a  000002ae  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a3  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000423  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000210  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000391  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000141  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  00000f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  8a:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <uart_init>:

#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
  92:	1b b8       	out	0x0b, r1	; 11
	UCSRA=0;
	UBRRH=0;
  94:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
	

	//uart_delay(100);
}
  a2:	08 95       	ret

000000a4 <uart_char>:

void uart_char(unsigned char t)
{
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <uart_char>
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  a8:	8c b9       	out	0x0c, r24	; 12
}
  aa:	08 95       	ret

000000ac <uart_num>:
	uart_delay(100);
}

 
void uart_num(unsigned char num)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	48 2f       	mov	r20, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
  b2:	64 e6       	ldi	r22, 0x64	; 100
  b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__udivmodqi4>
  b8:	e8 2f       	mov	r30, r24
	T=(num - (H*100))/10;
  ba:	28 2f       	mov	r18, r24
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	8c e9       	ldi	r24, 0x9C	; 156
  c0:	9f ef       	ldi	r25, 0xFF	; 255
  c2:	28 9f       	mul	r18, r24
  c4:	e0 01       	movw	r28, r0
  c6:	29 9f       	mul	r18, r25
  c8:	d0 0d       	add	r29, r0
  ca:	38 9f       	mul	r19, r24
  cc:	d0 0d       	add	r29, r0
  ce:	11 24       	eor	r1, r1
  d0:	ce 01       	movw	r24, r28
  d2:	84 0f       	add	r24, r20
  d4:	91 1d       	adc	r25, r1
  d6:	6a e0       	ldi	r22, 0x0A	; 10
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__divmodhi4>
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <uart_num+0x32>
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
  e2:	e0 5d       	subi	r30, 0xD0	; 208
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  e4:	ec b9       	out	0x0c, r30	; 12
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <uart_num+0x3a>
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
  ea:	60 5d       	subi	r22, 0xD0	; 208
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  ec:	6c b9       	out	0x0c, r22	; 12
  ee:	60 53       	subi	r22, 0x30	; 48
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  f0:	5d 9b       	sbis	0x0b, 5	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <uart_num+0x44>
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
  f4:	40 5d       	subi	r20, 0xD0	; 208
  f6:	4c 0f       	add	r20, r28
  f8:	86 ef       	ldi	r24, 0xF6	; 246
  fa:	9f ef       	ldi	r25, 0xFF	; 255
  fc:	68 9f       	mul	r22, r24
  fe:	80 2d       	mov	r24, r0
 100:	11 24       	eor	r1, r1
 102:	84 0f       	add	r24, r20
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
 104:	8c b9       	out	0x0c, r24	; 12
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <uart_read>:
 
unsigned char uart_read()
{
 10c:	5f 9b       	sbis	0x0b, 7	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <uart_read>
		while((UCSRA & 0b10000000)==0);
	return UDR;
 110:	8c b1       	in	r24, 0x0c	; 12
}
 112:	08 95       	ret

00000114 <uart_delay>:
 
void uart_delay(unsigned int delaytime)
{
 114:	88 ee       	ldi	r24, 0xE8	; 232
 116:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 118:	20 e9       	ldi	r18, 0x90	; 144
 11a:	31 e0       	ldi	r19, 0x01	; 1
 11c:	f9 01       	movw	r30, r18
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <uart_delay+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <uart_delay+0x8>
	_delay_ms(100);
}
 126:	08 95       	ret

00000128 <uart_string>:
	UDR=t;
}

 
void uart_string(char a[])
{
 128:	fc 01       	movw	r30, r24
 12a:	04 c0       	rjmp	.+8      	; 0x134 <uart_string+0xc>
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
 12c:	5d 9b       	sbis	0x0b, 5	; 11
 12e:	fe cf       	rjmp	.-4      	; 0x12c <uart_string+0x4>
	UDR=t;
 130:	8c b9       	out	0x0c, r24	; 12
 132:	31 96       	adiw	r30, 0x01	; 1
 
void uart_string(char a[])
{
	
	int i;
	for(i=0;a[i]!='\0';i++)
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	c9 f7       	brne	.-14     	; 0x12c <uart_string+0x4>
	uart_char(a[i]);
	uart_delay(100);
 13a:	84 e6       	ldi	r24, 0x64	; 100
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8a 00 	call	0x114	; 0x114 <uart_delay>
}
 142:	08 95       	ret

00000144 <adc_init>:
#define _ADC_H_						//This is the header for AVR Microcontroller.

unsigned int adcdata,adcdata1;

 void adc_init()
 {
 144:	86 e8       	ldi	r24, 0x86	; 134
 146:	86 b9       	out	0x06, r24	; 6
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  		
 }
 148:	08 95       	ret

0000014a <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
 14a:	90 e6       	ldi	r25, 0x60	; 96
 14c:	97 b9       	out	0x07, r25	; 7
    ADMUX=0X60;						//right align the ADC result
    ADMUX|=chno;					//select the ADC channel
 14e:	97 b1       	in	r25, 0x07	; 7
 150:	98 2b       	or	r25, r24
 152:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 154:	36 9a       	sbi	0x06, 6	; 6
 156:	80 ea       	ldi	r24, 0xA0	; 160
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <getdata+0x10>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 15e:	85 b1       	in	r24, 0x05	; 5
  }
 160:	08 95       	ret

00000162 <main>:
#include<avr/io.h> 
#include<util/delay.h> //i/o file
#include"uart.h"
#include"adc.h"
int main(void)
{
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	unsigned char digital;
	DDRB=0b11111111;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00000000;
 170:	18 ba       	out	0x18, r1	; 24

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 172:	96 e8       	ldi	r25, 0x86	; 134
 174:	96 b9       	out	0x06, r25	; 6
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0;
 176:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
 178:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
 182:	90 bd       	out	0x20, r25	; 32
 184:	88 ee       	ldi	r24, 0xE8	; 232
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	20 e9       	ldi	r18, 0x90	; 144
 18a:	31 e0       	ldi	r19, 0x01	; 1
 18c:	f9 01       	movw	r30, r18
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 192:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 194:	d9 f7       	brne	.-10     	; 0x18c <main+0x2a>
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 196:	80 e6       	ldi	r24, 0x60	; 96
 198:	f8 2e       	mov	r15, r24
 19a:	00 ea       	ldi	r16, 0xA0	; 160
 19c:	1f e0       	ldi	r17, 0x0F	; 15
 19e:	c0 e9       	ldi	r28, 0x90	; 144
 1a0:	d1 e0       	ldi	r29, 0x01	; 1
 1a2:	f7 b8       	out	0x07, r15	; 7
    ADMUX|=chno;					//select the ADC channel
 1a4:	87 b1       	in	r24, 0x07	; 7
 1a6:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 1a8:	36 9a       	sbi	0x06, 6	; 6
 1aa:	c8 01       	movw	r24, r16
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x4a>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 1b0:	85 b1       	in	r24, 0x05	; 5
	//char a;

	while(1)
	{
		digital=getdata(0x00);
		uart_num(digital);
 1b2:	0e 94 56 00 	call	0xac	; 0xac <uart_num>
    	//uart_string("Hello World");
		//uart_char('a');
		//uart_num(3);
		uart_string("\n");
 1b6:	80 e6       	ldi	r24, 0x60	; 96
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 94 00 	call	0x128	; 0x128 <uart_string>
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	97 e2       	ldi	r25, 0x27	; 39
 1c2:	fe 01       	movw	r30, r28
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <main+0x60>
 1cc:	ea cf       	rjmp	.-44     	; 0x1a2 <main+0x40>

000001ce <__udivmodqi4>:
 1ce:	99 1b       	sub	r25, r25
 1d0:	79 e0       	ldi	r23, 0x09	; 9
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__udivmodqi4_ep>

000001d4 <__udivmodqi4_loop>:
 1d4:	99 1f       	adc	r25, r25
 1d6:	96 17       	cp	r25, r22
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <__udivmodqi4_ep>
 1da:	96 1b       	sub	r25, r22

000001dc <__udivmodqi4_ep>:
 1dc:	88 1f       	adc	r24, r24
 1de:	7a 95       	dec	r23
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <__udivmodqi4_loop>
 1e2:	80 95       	com	r24
 1e4:	08 95       	ret

000001e6 <__divmodhi4>:
 1e6:	97 fb       	bst	r25, 7
 1e8:	09 2e       	mov	r0, r25
 1ea:	07 26       	eor	r0, r23
 1ec:	0a d0       	rcall	.+20     	; 0x202 <__divmodhi4_neg1>
 1ee:	77 fd       	sbrc	r23, 7
 1f0:	04 d0       	rcall	.+8      	; 0x1fa <__divmodhi4_neg2>
 1f2:	0c d0       	rcall	.+24     	; 0x20c <__udivmodhi4>
 1f4:	06 d0       	rcall	.+12     	; 0x202 <__divmodhi4_neg1>
 1f6:	00 20       	and	r0, r0
 1f8:	1a f4       	brpl	.+6      	; 0x200 <__divmodhi4_exit>

000001fa <__divmodhi4_neg2>:
 1fa:	70 95       	com	r23
 1fc:	61 95       	neg	r22
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000200 <__divmodhi4_exit>:
 200:	08 95       	ret

00000202 <__divmodhi4_neg1>:
 202:	f6 f7       	brtc	.-4      	; 0x200 <__divmodhi4_exit>
 204:	90 95       	com	r25
 206:	81 95       	neg	r24
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	08 95       	ret

0000020c <__udivmodhi4>:
 20c:	aa 1b       	sub	r26, r26
 20e:	bb 1b       	sub	r27, r27
 210:	51 e1       	ldi	r21, 0x11	; 17
 212:	07 c0       	rjmp	.+14     	; 0x222 <__udivmodhi4_ep>

00000214 <__udivmodhi4_loop>:
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	a6 17       	cp	r26, r22
 21a:	b7 07       	cpc	r27, r23
 21c:	10 f0       	brcs	.+4      	; 0x222 <__udivmodhi4_ep>
 21e:	a6 1b       	sub	r26, r22
 220:	b7 0b       	sbc	r27, r23

00000222 <__udivmodhi4_ep>:
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	5a 95       	dec	r21
 228:	a9 f7       	brne	.-22     	; 0x214 <__udivmodhi4_loop>
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
